/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  MainDemoConsumerBase,
  MainDemoConsumerBaseInterface,
} from "../../../../../@redstone-finance/evm-connector/contracts/data-services/MainDemoConsumerBase";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "CanNotPickMedianOfEmptyArray",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "GetDataServiceIdNotImplemented",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampFromTooLongFuture",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "TimestampIsTooOld",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregateValues",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signerAddress",
        type: "address",
      },
    ],
    name: "getAuthorisedSignerIndex",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataServiceId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getUniqueSignersThreshold",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedTimestampMilliseconds",
        type: "uint256",
      },
    ],
    name: "validateTimestamp",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001657610779908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c9081633ce142f51461008e5750806355a547d514610085578063b24ebfcc1461007c578063c274583a14610073578063f50b2efe1461006a5763f90c49241461006257600080fd5b61000e6103ed565b5061000e610356565b5061000e6102d0565b5061000e61022b565b5061000e6100cc565b346100c95760203660031901126100c957600435906001600160a01b03821682036100c95760206100be83610621565b60ff60405191168152f35b80fd5b503461000e57600036600319011261000e5760006100e8610560565b6100fb6100f4826105f8565b61ffff1690565b9081156101af5761010c8391610421565b91815b81811061012557604051838152602090f35b0390f35b9091610130846104a8565b9065ffffffffffff61014a61014487610439565b3661049b565b351690811561019d5780610176575061016d916101679195610463565b91610470565b9291909261010f565b8095910361018b5761016d9161016791610463565b60405163d9d1f46560e01b8152600490fd5b604051630336dc9d60e41b8152600490fd5b604051632154bfcf60e21b8152600490fd5b50634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff8211176101f857604052565b6102006101c1565b604052565b6040519190601f01601f1916820167ffffffffffffffff8111838210176101f857604052565b503461000e5760208060031936011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e5780600401359182116102c3575b8160051b60248461027b818401610205565b8095815201918301019136831161000e57602401905b8282106102b4576101216102a48561068d565b6040519081529081906020820190565b81358152908401908401610291565b6102cb6101c1565b610269565b503461000e57600036600319011261000e576102ea6101d8565b6012815260207172656473746f6e652d6d61696e2d64656d6f60701b818301526040908151928184928352815191828285015260005b838110610340575050600083830185015250601f01601f19168101030190f35b8181018301518782018701528694508201610320565b503461000e57602036600319011261000e576103e8600435048042106000146103ac57603c610385428361049b565b1161038c57005b60405163b6b0916d60e01b81526004810191909152426024820152604490fd5b60b48142034281116103e0575b116103c057005b604051630321d0b560e01b81526004810191909152426024820152604490fd5b6103e861040a565b6103b9565b503461000e57600036600319011261000e57602060405160018152f35b50634e487b7160e01b600052601160045260246000fd5b906002820180921161042f57565b61043761040a565b565b906068820180921161042f57565b90604e820180921161042f57565b906009820180921161042f57565b9190820180921161042f57565b6001906000198114610480570190565b61048861040a565b0190565b60001981019190821161042f57565b9190820391821161042f57565b61050f9060418101808211610553575b6061820110610546575b360363ffffffff62ffffff606019830192368411610539575b606319019280841161052c575b3516913516602001908160201161051f575b81810291818304149015171561051257610447565b90565b61051a61040a565b610447565b61052761040a565b6104fa565b61053461040a565b6104e8565b61054161040a565b6104db565b61054e61040a565b6104c2565b61055b61040a565b6104b8565b6602ed57011dffff1936601f1901356602ed57011e000016016105e657366029116105d4576105a362ffffff60281936013516600381018091116105c757610455565b366105ad82610421565b116105b55790565b60405163c30a7bd760e01b8152600490fd5b6105cf61040a565b610455565b604051632bcb7bc560e11b8152600490fd5b6040516373bb264f60e11b8152600490fd5b60208101808211610614575b36106105d4573603601f19013590565b61061c61040a565b610604565b6001600160a01b0316730c39486f770b26f5527bbbf942726537986cd7eb810361064b5750600090565b602490604051906303b1166f60e61b82526004820152fd5b80518210156106775760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b80511561073157805160209060051b82018101818301805b8281106106ff57505050508051600181811c9116156000146106f25761050f916106e5826106de6106d86106ec9561048c565b84610663565b5192610663565b5190610463565b60011c90565b6106fb91610663565b5190565b83825b8281106107105750016106a5565b82518151808210610726575b5050018490610702565b84528152388061071c565b604051639e198af960e01b8152600490fdfea2646970667358221220593b5148fcd86a64f5f56e68b48ab0f9c08b3b009db6fd7ef427fcf78cfeebd664736f6c63430008110033";

type MainDemoConsumerBaseConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MainDemoConsumerBaseConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MainDemoConsumerBase__factory extends ContractFactory {
  constructor(...args: MainDemoConsumerBaseConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MainDemoConsumerBase> {
    return super.deploy(overrides || {}) as Promise<MainDemoConsumerBase>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MainDemoConsumerBase {
    return super.attach(address) as MainDemoConsumerBase;
  }
  override connect(signer: Signer): MainDemoConsumerBase__factory {
    return super.connect(signer) as MainDemoConsumerBase__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MainDemoConsumerBaseInterface {
    return new utils.Interface(_abi) as MainDemoConsumerBaseInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MainDemoConsumerBase {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MainDemoConsumerBase;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  CalldataExtractor,
  CalldataExtractorInterface,
} from "../../../../../@redstone-finance/evm-connector/contracts/core/CalldataExtractor";

const _abi = [
  {
    inputs: [],
    name: "CalldataMustHaveValidPayload",
    type: "error",
  },
  {
    inputs: [],
    name: "CalldataOverOrUnderFlow",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampMustNotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "DataPackageTimestampsMustBeEqual",
    type: "error",
  },
  {
    inputs: [],
    name: "EachSignerMustProvideTheSameValue",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptyCalldataPointersArr",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectUnsignedMetadataSize",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedSignersCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredSignersCount",
        type: "uint256",
      },
    ],
    name: "InsufficientNumberOfUniqueSigners",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidCalldataPointer",
    type: "error",
  },
  {
    inputs: [],
    name: "RedstonePayloadMustHaveAtLeastOneDataPackage",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "SignerNotAuthorised",
    type: "error",
  },
  {
    inputs: [],
    name: "extractTimestampsAndAssertAllAreEqual",
    outputs: [
      {
        internalType: "uint256",
        name: "extractedTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610016576102a9908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b6000803560e01c6355a547d51461002d57600080fd5b3461024d578060031936011261024d5780926602ed57011e000080601f19360135160361023f57503660291161022f5762ffffff93846028193601351694600386019586811161021c57600c810180971161021c57600e8101968781116101785736881161020c57602c82018091116101785736106101fc573603602b19013561ffff169586156101ec579083915b8783106100cd576020878751908152f35b604181018082116101d957606182018091116101d9576100ed9036610250565b600219810197908089116101c6578390351663ffffffff602099351689018099116101c65788810298818a0414901517156101d957604e9081890189116101c657606883018084116101b35761014a65ffffffffffff9136610250565b35169081156101a3578061018b5750975b8201018091116101785791600019811461017857600101916100bc565b634e487b7160e01b855260118452602485fd5b9890891461015b57875163d9d1f46560e01b81528690fd5b8851630336dc9d60e41b81528790fd5b634e487b7160e01b885260118752602488fd5b634e487b7160e01b875260118652602487fd5b634e487b7160e01b865260118552602486fd5b8451632154bfcf60e21b81528390fd5b8451632bcb7bc560e11b81528390fd5b855163c30a7bd760e01b81528490fd5b634e487b7160e01b845260118352602484fd5b8151632bcb7bc560e11b81528490fd5b6373bb264f60e11b81528490fd5b80fd5b9190820391821161025d57565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220901f65bdd3905ab733c2ec2714ccece333f93f666cc57c9cace0c85b2f20502a64736f6c63430008110033";

type CalldataExtractorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CalldataExtractorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CalldataExtractor__factory extends ContractFactory {
  constructor(...args: CalldataExtractorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CalldataExtractor> {
    return super.deploy(overrides || {}) as Promise<CalldataExtractor>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CalldataExtractor {
    return super.attach(address) as CalldataExtractor;
  }
  override connect(signer: Signer): CalldataExtractor__factory {
    return super.connect(signer) as CalldataExtractor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CalldataExtractorInterface {
    return new utils.Interface(_abi) as CalldataExtractorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CalldataExtractor {
    return new Contract(address, _abi, signerOrProvider) as CalldataExtractor;
  }
}

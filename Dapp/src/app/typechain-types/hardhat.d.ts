/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "AggregatorV2V3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV2V3Interface__factory>;
    getContractFactory(
      name: "AggregatorV3Interface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorV3Interface__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "CalldataExtractor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalldataExtractor__factory>;
    getContractFactory(
      name: "RedstoneConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConstants__factory>;
    getContractFactory(
      name: "RedstoneConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerBase__factory>;
    getContractFactory(
      name: "RedstoneConsumerNumericBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerNumericBase__factory>;
    getContractFactory(
      name: "RedstoneDefaultsLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneDefaultsLib__factory>;
    getContractFactory(
      name: "MainDemoConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainDemoConsumerBase__factory>;
    getContractFactory(
      name: "NumericArrayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NumericArrayLib__factory>;
    getContractFactory(
      name: "Lock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lock__factory>;
    getContractFactory(
      name: "MockV3Aggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockV3Aggregator__factory>;
    getContractFactory(
      name: "NFTToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTToken__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "ZLend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZLend__factory>;
    getContractFactory(
      name: "ZLend2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZLend2__factory>;
    getContractFactory(
      name: "ZLend2Manual",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZLend2Manual__factory>;
    getContractFactory(
      name: "IExtendedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtendedERC20__factory>;
    getContractFactory(
      name: "ZLend2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZLend2__factory>;
    getContractFactory(
      name: "ZLendToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZLendToken__factory>;

    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "AggregatorV2V3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV2V3Interface>;
    getContractAt(
      name: "AggregatorV3Interface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorV3Interface>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "CalldataExtractor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CalldataExtractor>;
    getContractAt(
      name: "RedstoneConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConstants>;
    getContractAt(
      name: "RedstoneConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerBase>;
    getContractAt(
      name: "RedstoneConsumerNumericBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerNumericBase>;
    getContractAt(
      name: "RedstoneDefaultsLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneDefaultsLib>;
    getContractAt(
      name: "MainDemoConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainDemoConsumerBase>;
    getContractAt(
      name: "NumericArrayLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NumericArrayLib>;
    getContractAt(
      name: "Lock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Lock>;
    getContractAt(
      name: "MockV3Aggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockV3Aggregator>;
    getContractAt(
      name: "NFTToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTToken>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "ZLend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZLend>;
    getContractAt(
      name: "ZLend2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZLend2>;
    getContractAt(
      name: "ZLend2Manual",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZLend2Manual>;
    getContractAt(
      name: "IExtendedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtendedERC20>;
    getContractAt(
      name: "ZLend2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZLend2>;
    getContractAt(
      name: "ZLendToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZLendToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}

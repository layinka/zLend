/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ZLend2 {
  export type TokenStruct = {
    tokenAddress: PromiseOrValue<string>;
    LTV: PromiseOrValue<BigNumberish>;
    stableRate: PromiseOrValue<BigNumberish>;
    interestRate: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
  };

  export type TokenStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    tokenAddress: string;
    LTV: BigNumber;
    stableRate: BigNumber;
    interestRate: BigNumber;
    name: string;
  };
}

export interface ZLend2Interface extends utils.Interface {
  functions: {
    "addTokensForBorrowing(string,address,uint256,uint256,uint256)": FunctionFragment;
    "addTokensForLending(string,address,uint256,uint256,uint256)": FunctionFragment;
    "aggregateValues(uint256[])": FunctionFragment;
    "borrow(uint256,address)": FunctionFragment;
    "borrowers(uint256)": FunctionFragment;
    "extractTimestampsAndAssertAllAreEqual()": FunctionFragment;
    "getAmountInDollars(uint256,address)": FunctionFragment;
    "getAuthorisedSignerIndex(address)": FunctionFragment;
    "getBorrowersArray()": FunctionFragment;
    "getDataServiceId()": FunctionFragment;
    "getLendersArray()": FunctionFragment;
    "getPriceInUSDFromRedstone(address)": FunctionFragment;
    "getPriceInUSDFromRedstone(string)": FunctionFragment;
    "getRemainingCollateral(address)": FunctionFragment;
    "getTokenAvailableToWithdraw(address)": FunctionFragment;
    "getTokenFrom(address)": FunctionFragment;
    "getTokensForBorrowingArray()": FunctionFragment;
    "getTokensForLendingArray()": FunctionFragment;
    "getTotalAmountBorrowedInDollars(address)": FunctionFragment;
    "getTotalAmountLentInDollars(address)": FunctionFragment;
    "getTotalTokenBorrowed(address)": FunctionFragment;
    "getTotalTokenSupplied(address)": FunctionFragment;
    "getUniqueSignersThreshold()": FunctionFragment;
    "getUserTotalAmountAvailableForBorrowInDollars(address)": FunctionFragment;
    "hasLentOrBorrowedToken(address,address,uint256,string)": FunctionFragment;
    "interest(address,uint256)": FunctionFragment;
    "lend(address,uint256)": FunctionFragment;
    "lenders(uint256)": FunctionFragment;
    "noOfTokensBorrowed()": FunctionFragment;
    "noOfTokensLent()": FunctionFragment;
    "oneTokenEqualsHowManyDollars(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "payDebt(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenPriceFeed(address)": FunctionFragment;
    "tokenPriceFeedDec(address)": FunctionFragment;
    "tokensBorrowed(uint256,address)": FunctionFragment;
    "tokensBorrowedAmount(address,address)": FunctionFragment;
    "tokensForBorrowing(uint256)": FunctionFragment;
    "tokensForLending(uint256)": FunctionFragment;
    "tokensLent(uint256,address)": FunctionFragment;
    "tokensLentAmount(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateTokenPrice(address,uint256,uint256)": FunctionFragment;
    "validateTimestamp(uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "zLToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addTokensForBorrowing"
      | "addTokensForLending"
      | "aggregateValues"
      | "borrow"
      | "borrowers"
      | "extractTimestampsAndAssertAllAreEqual"
      | "getAmountInDollars"
      | "getAuthorisedSignerIndex"
      | "getBorrowersArray"
      | "getDataServiceId"
      | "getLendersArray"
      | "getPriceInUSDFromRedstone(address)"
      | "getPriceInUSDFromRedstone(string)"
      | "getRemainingCollateral"
      | "getTokenAvailableToWithdraw"
      | "getTokenFrom"
      | "getTokensForBorrowingArray"
      | "getTokensForLendingArray"
      | "getTotalAmountBorrowedInDollars"
      | "getTotalAmountLentInDollars"
      | "getTotalTokenBorrowed"
      | "getTotalTokenSupplied"
      | "getUniqueSignersThreshold"
      | "getUserTotalAmountAvailableForBorrowInDollars"
      | "hasLentOrBorrowedToken"
      | "interest"
      | "lend"
      | "lenders"
      | "noOfTokensBorrowed"
      | "noOfTokensLent"
      | "oneTokenEqualsHowManyDollars"
      | "owner"
      | "payDebt"
      | "renounceOwnership"
      | "tokenPriceFeed"
      | "tokenPriceFeedDec"
      | "tokensBorrowed"
      | "tokensBorrowedAmount"
      | "tokensForBorrowing"
      | "tokensForLending"
      | "tokensLent"
      | "tokensLentAmount"
      | "transferOwnership"
      | "updateTokenPrice"
      | "validateTimestamp"
      | "withdraw"
      | "zLToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addTokensForBorrowing",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokensForLending",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregateValues",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountInDollars",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorisedSignerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBorrowersArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDataServiceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLendersArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInUSDFromRedstone(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceInUSDFromRedstone(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAvailableToWithdraw",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenFrom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensForBorrowingArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensForLendingArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountBorrowedInDollars",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalAmountLentInDollars",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenBorrowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenSupplied",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUniqueSignersThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalAmountAvailableForBorrowInDollars",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasLentOrBorrowedToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interest",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lend",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lenders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "noOfTokensBorrowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noOfTokensLent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneTokenEqualsHowManyDollars",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payDebt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceFeed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPriceFeedDec",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensBorrowed",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensBorrowedAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForBorrowing",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensForLending",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensLent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensLentAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "zLToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addTokensForBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokensForLending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregateValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrowers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extractTimestampsAndAssertAllAreEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountInDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorisedSignerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBorrowersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDataServiceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInUSDFromRedstone(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceInUSDFromRedstone(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAvailableToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensForBorrowingArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensForLendingArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountBorrowedInDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalAmountLentInDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenSupplied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUniqueSignersThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalAmountAvailableForBorrowInDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasLentOrBorrowedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "interest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "noOfTokensBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfTokensLent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneTokenEqualsHowManyDollars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenPriceFeedDec",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensBorrowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensBorrowedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForBorrowing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensForLending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokensLent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensLentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zLToken", data: BytesLike): Result;

  events: {
    "Borrow(address,uint256,uint256,bool,int256,address[],uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayDebt(address,int256,uint256,uint256,address[])": EventFragment;
    "Supply(address,address[],uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayDebt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Supply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface BorrowEventObject {
  sender: string;
  amountInDollars: BigNumber;
  totalAmountAvailableForBorrowInDollars: BigNumber;
  userPresent: boolean;
  userIndex: BigNumber;
  borrowers: string[];
  currentUserTokenBorrowedAmount: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, BigNumber, string[], BigNumber],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayDebtEventObject {
  sender: string;
  index: BigNumber;
  tokenAmountBorrowed: BigNumber;
  totalTokenAmountToCollectFromUser: BigNumber;
  borrowers: string[];
}
export type PayDebtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string[]],
  PayDebtEventObject
>;

export type PayDebtEventFilter = TypedEventFilter<PayDebtEvent>;

export interface SupplyEventObject {
  sender: string;
  lenders: string[];
  currentUserTokenLentAmount: BigNumber;
}
export type SupplyEvent = TypedEvent<
  [string, string[], BigNumber],
  SupplyEventObject
>;

export type SupplyEventFilter = TypedEventFilter<SupplyEvent>;

export interface WithdrawEventObject {
  sender: string;
  amount: BigNumber;
  tokenToWithdrawInDollars: BigNumber;
  availableToWithdraw: BigNumber;
  totalAmountLentInDollars: BigNumber;
  zLTokenToRemove: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface ZLend2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZLend2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addTokensForBorrowing(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokensForLending(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { extractedTimestamp: BigNumber }>;

    getAmountInDollars(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getBorrowersArray(overrides?: CallOverrides): Promise<[string[]]>;

    getDataServiceId(overrides?: CallOverrides): Promise<[string]>;

    getLendersArray(overrides?: CallOverrides): Promise<[string[]]>;

    "getPriceInUSDFromRedstone(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceInUSDFromRedstone(string)"(
      feedId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRemainingCollateral(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenAvailableToWithdraw(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokenFrom(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ZLend2.TokenStructOutput]>;

    getTokensForBorrowingArray(
      overrides?: CallOverrides
    ): Promise<[ZLend2.TokenStructOutput[]]>;

    getTokensForLendingArray(
      overrides?: CallOverrides
    ): Promise<[ZLend2.TokenStructOutput[]]>;

    getTotalAmountBorrowedInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalAmountLentInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalTokenBorrowed(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalTokenSupplied(
      tokenAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<[number]>;

    getUserTotalAmountAvailableForBorrowInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasLentOrBorrowedToken(
      currentUser: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      noOfTokenslentOrBorrowed: PromiseOrValue<BigNumberish>,
      _tokensLentOrBorrowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    interest(
      tokenAddress: PromiseOrValue<string>,
      tokenBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lend(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lenders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    noOfTokensBorrowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    noOfTokensLent(overrides?: CallOverrides): Promise<[BigNumber]>;

    oneTokenEqualsHowManyDollars(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payDebt(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenPriceFeed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenPriceFeedDec(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokensBorrowed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensBorrowedAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokensForBorrowing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        tokenAddress: string;
        LTV: BigNumber;
        stableRate: BigNumber;
        interestRate: BigNumber;
        name: string;
      }
    >;

    tokensForLending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        tokenAddress: string;
        LTV: BigNumber;
        stableRate: BigNumber;
        interestRate: BigNumber;
        name: string;
      }
    >;

    tokensLent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokensLentAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTokenPrice(
      tokenAddress: PromiseOrValue<string>,
      usdPrice: PromiseOrValue<BigNumberish>,
      decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zLToken(overrides?: CallOverrides): Promise<[string]>;
  };

  addTokensForBorrowing(
    name: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    LTV: PromiseOrValue<BigNumberish>,
    borrowStableRate: PromiseOrValue<BigNumberish>,
    interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokensForLending(
    name: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    LTV: PromiseOrValue<BigNumberish>,
    borrowStableRate: PromiseOrValue<BigNumberish>,
    interestRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregateValues(
    values: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    amount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  extractTimestampsAndAssertAllAreEqual(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountInDollars(
    amount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAuthorisedSignerIndex(
    signerAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getBorrowersArray(overrides?: CallOverrides): Promise<string[]>;

  getDataServiceId(overrides?: CallOverrides): Promise<string>;

  getLendersArray(overrides?: CallOverrides): Promise<string[]>;

  "getPriceInUSDFromRedstone(address)"(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceInUSDFromRedstone(string)"(
    feedId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRemainingCollateral(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenAvailableToWithdraw(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokenFrom(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ZLend2.TokenStructOutput>;

  getTokensForBorrowingArray(
    overrides?: CallOverrides
  ): Promise<ZLend2.TokenStructOutput[]>;

  getTokensForLendingArray(
    overrides?: CallOverrides
  ): Promise<ZLend2.TokenStructOutput[]>;

  getTotalAmountBorrowedInDollars(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalAmountLentInDollars(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTokenBorrowed(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalTokenSupplied(
    tokenAddres: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

  getUserTotalAmountAvailableForBorrowInDollars(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasLentOrBorrowedToken(
    currentUser: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    noOfTokenslentOrBorrowed: PromiseOrValue<BigNumberish>,
    _tokensLentOrBorrowed: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  interest(
    tokenAddress: PromiseOrValue<string>,
    tokenBorrowed: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lend(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lenders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  noOfTokensBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

  noOfTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

  oneTokenEqualsHowManyDollars(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  owner(overrides?: CallOverrides): Promise<string>;

  payDebt(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenPriceFeed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenPriceFeedDec(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokensBorrowed(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensBorrowedAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokensForBorrowing(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      tokenAddress: string;
      LTV: BigNumber;
      stableRate: BigNumber;
      interestRate: BigNumber;
      name: string;
    }
  >;

  tokensForLending(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      tokenAddress: string;
      LTV: BigNumber;
      stableRate: BigNumber;
      interestRate: BigNumber;
      name: string;
    }
  >;

  tokensLent(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokensLentAmount(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTokenPrice(
    tokenAddress: PromiseOrValue<string>,
    usdPrice: PromiseOrValue<BigNumberish>,
    decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validateTimestamp(
    receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zLToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addTokensForBorrowing(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokensForLending(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountInDollars(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getBorrowersArray(overrides?: CallOverrides): Promise<string[]>;

    getDataServiceId(overrides?: CallOverrides): Promise<string>;

    getLendersArray(overrides?: CallOverrides): Promise<string[]>;

    "getPriceInUSDFromRedstone(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceInUSDFromRedstone(string)"(
      feedId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingCollateral(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAvailableToWithdraw(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFrom(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ZLend2.TokenStructOutput>;

    getTokensForBorrowingArray(
      overrides?: CallOverrides
    ): Promise<ZLend2.TokenStructOutput[]>;

    getTokensForLendingArray(
      overrides?: CallOverrides
    ): Promise<ZLend2.TokenStructOutput[]>;

    getTotalAmountBorrowedInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAmountLentInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenBorrowed(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenSupplied(
      tokenAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<number>;

    getUserTotalAmountAvailableForBorrowInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLentOrBorrowedToken(
      currentUser: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      noOfTokenslentOrBorrowed: PromiseOrValue<BigNumberish>,
      _tokensLentOrBorrowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    interest(
      tokenAddress: PromiseOrValue<string>,
      tokenBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    lenders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    noOfTokensBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    noOfTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenEqualsHowManyDollars(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    owner(overrides?: CallOverrides): Promise<string>;

    payDebt(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenPriceFeed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceFeedDec(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensBorrowed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensBorrowedAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensForBorrowing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        tokenAddress: string;
        LTV: BigNumber;
        stableRate: BigNumber;
        interestRate: BigNumber;
        name: string;
      }
    >;

    tokensForLending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        tokenAddress: string;
        LTV: BigNumber;
        stableRate: BigNumber;
        interestRate: BigNumber;
        name: string;
      }
    >;

    tokensLent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokensLentAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTokenPrice(
      tokenAddress: PromiseOrValue<string>,
      usdPrice: PromiseOrValue<BigNumberish>,
      decimal: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    zLToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Borrow(address,uint256,uint256,bool,int256,address[],uint256)"(
      sender?: null,
      amountInDollars?: null,
      totalAmountAvailableForBorrowInDollars?: null,
      userPresent?: null,
      userIndex?: null,
      borrowers?: null,
      currentUserTokenBorrowedAmount?: null
    ): BorrowEventFilter;
    Borrow(
      sender?: null,
      amountInDollars?: null,
      totalAmountAvailableForBorrowInDollars?: null,
      userPresent?: null,
      userIndex?: null,
      borrowers?: null,
      currentUserTokenBorrowedAmount?: null
    ): BorrowEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PayDebt(address,int256,uint256,uint256,address[])"(
      sender?: null,
      index?: null,
      tokenAmountBorrowed?: null,
      totalTokenAmountToCollectFromUser?: null,
      borrowers?: null
    ): PayDebtEventFilter;
    PayDebt(
      sender?: null,
      index?: null,
      tokenAmountBorrowed?: null,
      totalTokenAmountToCollectFromUser?: null,
      borrowers?: null
    ): PayDebtEventFilter;

    "Supply(address,address[],uint256)"(
      sender?: null,
      lenders?: null,
      currentUserTokenLentAmount?: null
    ): SupplyEventFilter;
    Supply(
      sender?: null,
      lenders?: null,
      currentUserTokenLentAmount?: null
    ): SupplyEventFilter;

    "Withdraw(address,uint256,uint256,uint256,uint256,uint256)"(
      sender?: null,
      amount?: null,
      tokenToWithdrawInDollars?: null,
      availableToWithdraw?: null,
      totalAmountLentInDollars?: null,
      zLTokenToRemove?: null
    ): WithdrawEventFilter;
    Withdraw(
      sender?: null,
      amount?: null,
      tokenToWithdrawInDollars?: null,
      availableToWithdraw?: null,
      totalAmountLentInDollars?: null,
      zLTokenToRemove?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    addTokensForBorrowing(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokensForLending(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountInDollars(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBorrowersArray(overrides?: CallOverrides): Promise<BigNumber>;

    getDataServiceId(overrides?: CallOverrides): Promise<BigNumber>;

    getLendersArray(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceInUSDFromRedstone(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceInUSDFromRedstone(string)"(
      feedId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRemainingCollateral(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAvailableToWithdraw(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFrom(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensForBorrowingArray(overrides?: CallOverrides): Promise<BigNumber>;

    getTokensForLendingArray(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalAmountBorrowedInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalAmountLentInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenBorrowed(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalTokenSupplied(
      tokenAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUniqueSignersThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTotalAmountAvailableForBorrowInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasLentOrBorrowedToken(
      currentUser: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      noOfTokenslentOrBorrowed: PromiseOrValue<BigNumberish>,
      _tokensLentOrBorrowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interest(
      tokenAddress: PromiseOrValue<string>,
      tokenBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lend(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lenders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    noOfTokensBorrowed(overrides?: CallOverrides): Promise<BigNumber>;

    noOfTokensLent(overrides?: CallOverrides): Promise<BigNumber>;

    oneTokenEqualsHowManyDollars(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payDebt(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenPriceFeed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenPriceFeedDec(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensBorrowed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensBorrowedAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensForBorrowing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensForLending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensLent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensLentAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTokenPrice(
      tokenAddress: PromiseOrValue<string>,
      usdPrice: PromiseOrValue<BigNumberish>,
      decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zLToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addTokensForBorrowing(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokensForLending(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      LTV: PromiseOrValue<BigNumberish>,
      borrowStableRate: PromiseOrValue<BigNumberish>,
      interestRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregateValues(
      values: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    extractTimestampsAndAssertAllAreEqual(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountInDollars(
      amount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorisedSignerIndex(
      signerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBorrowersArray(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDataServiceId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLendersArray(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPriceInUSDFromRedstone(address)"(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceInUSDFromRedstone(string)"(
      feedId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRemainingCollateral(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAvailableToWithdraw(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenFrom(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensForBorrowingArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensForLendingArray(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountBorrowedInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalAmountLentInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenBorrowed(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenSupplied(
      tokenAddres: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUniqueSignersThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTotalAmountAvailableForBorrowInDollars(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasLentOrBorrowedToken(
      currentUser: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      noOfTokenslentOrBorrowed: PromiseOrValue<BigNumberish>,
      _tokensLentOrBorrowed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interest(
      tokenAddress: PromiseOrValue<string>,
      tokenBorrowed: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lend(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lenders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noOfTokensBorrowed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noOfTokensLent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oneTokenEqualsHowManyDollars(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payDebt(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenPriceFeed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenPriceFeedDec(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensBorrowed(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensBorrowedAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForBorrowing(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensForLending(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensLent(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensLentAmount(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTokenPrice(
      tokenAddress: PromiseOrValue<string>,
      usdPrice: PromiseOrValue<BigNumberish>,
      decimal: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validateTimestamp(
      receivedTimestampMilliseconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zLToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
